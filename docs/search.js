window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "gpreplicator", "modulename": "gpreplicator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "gpreplicator.GPReplicator", "modulename": "gpreplicator.GPReplicator", "kind": "module", "doc": "<p><strong>Gitee Projects Replicator</strong>, <strong>GPReplicator</strong> or <strong>GPR</strong> is the simple Python API for mirroring projects\nfrom/to Chinese gitee.com and Russian gitee.ru or another git-repository as GitHub, GitLab etc.\nAlso, a mirrored project contains most important project artifacts: description, issues, milestones, releases and documentation.</p>\n\n<p>Replication and synchronization worked throw HTTP API.v5 of Gitee service.</p>\n\n<p>See also:</p>\n\n<ul>\n<li>\ud83d\udcda <a href=\"https://github.com/3LogicGroup/GiteeProjectsReplicator/blob/master/README_EN.md\">Main documentation with examples</a></li>\n<li>\u2699 <a href=\"https://3logicgroup.github.io/GiteeProjectsReplicator/docs/gpreplicator/GPReplicator.html\">Documentation on GPReplicator class methods (for Python developers)</a></li>\n</ul>\n\n<p>Also, GPReplicator can be used as a CLI manager to work with Gitee projects in the console.\nFor all examples, you will need to use the <a href=\"https://gitee.com/api/v5/oauth_doc\">Gitee OAuth token</a>.</p>\n\n<p>Examples:</p>\n\n<ul>\n<li><p>Get and show project tree files recursively (also replace API gateway for Chinese service):</p>\n\n<p><code>python3 GPReplicator.py -v 10 -gg https://gitee.ru/api/v5 -gt \"your_token\" -go \"project_group_owner\" -gp \"repository_name\" --gitee-recursive --files</code></p>\n\n<p>Example:</p>\n\n<p><code>python3 GPReplicator.py -v 10 -gg https://gitee.ru/api/v5 -gt \"token\" -go tim55667757 -gp PriceGenerator --files</code></p></li>\n<li><p>Get and show project description:</p>\n\n<p><code>python3 GPReplicator.py -v 10 -gg https://gitee.ru/api/v5 -gt \"token\" -go \"owner\" -gp \"repository\" --description</code></p></li>\n<li><p>Get and show project issues:</p>\n\n<p><code>python3 GPReplicator.py -v 10 -gg https://gitee.ru/api/v5 -gt \"token\" -go \"owner\" -gp \"repository\" --issues</code></p></li>\n</ul>\n\n<p>More CLI examples see in documentation:</p>\n\n<ul>\n<li>\ud83c\uddf7\ud83c\uddfa <a href=\"https://3logicgroup.github.io/GiteeProjectsReplicator\">In Russian</a></li>\n<li>\ud83c\uddfa\ud83c\uddf8 <a href=\"https://github.com/3LogicGroup/GiteeProjectsReplicator/blob/master/README_EN.md\">In English</a></li>\n</ul>\n"}, {"fullname": "gpreplicator.GPReplicator.uLogger", "modulename": "gpreplicator.GPReplicator", "qualname": "uLogger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger GPReplicator-UniLogger (DEBUG)&gt;"}, {"fullname": "gpreplicator.GPReplicator.CPU_COUNT", "modulename": "gpreplicator.GPReplicator", "qualname": "CPU_COUNT", "kind": "variable", "doc": "<p></p>\n", "default_value": "20"}, {"fullname": "gpreplicator.GPReplicator.CPU_USAGES", "modulename": "gpreplicator.GPReplicator", "qualname": "CPU_USAGES", "kind": "variable", "doc": "<p></p>\n", "default_value": "19"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport", "kind": "class", "doc": "<p>This class implements methods to work with Gitee HTTP API service.</p>\n\n<ul>\n<li>Russian Gitee service: <a href=\"https://gitee.ru\">https://gitee.ru</a>\n<ul>\n<li>Russian service API gateway: <a href=\"https://gitee.ru/api/v5\"><a href=\"https://gitee.ru/api/v5\">https://gitee.ru/api/v5</a></a></li>\n<li>Russian service swagger documentation: <a href=\"https://gitee.ru/api/v5/swagger\"><a href=\"https://gitee.ru/api/v5/swagger\">https://gitee.ru/api/v5/swagger</a></a></li>\n</ul></li>\n<li>Chinese Gitee service: <a href=\"https://gitee.com\">https://gitee.com</a>\n<ul>\n<li>Chinese service API gateway: <a href=\"https://gitee.com/api/v5\"><a href=\"https://gitee.com/api/v5\">https://gitee.com/api/v5</a></a></li>\n<li>Chinese service swagger documentation: <a href=\"https://gitee.com/api/v5/swagger\"><a href=\"https://gitee.com/api/v5/swagger\">https://gitee.com/api/v5/swagger</a></a></li>\n</ul></li>\n</ul>\n\n<p>Examples to work with API:</p>\n\n<ul>\n<li><a href=\"https://gitee.ru/api/v5/swagger\">https://gitee.ru/api/v5/swagger</a></li>\n<li><a href=\"https://gitee.com/api/v5/swagger\">https://gitee.com/api/v5/swagger</a></li>\n</ul>\n\n<p>About <code>gToken</code> for Gitee OAuth:</p>\n\n<ul>\n<li><a href=\"https://gitee.ru/api/v5/oauth_doc\">https://gitee.ru/api/v5/oauth_doc</a></li>\n<li><a href=\"https://gitee.com/api/v5/oauth_doc\">https://gitee.com/api/v5/oauth_doc</a></li>\n</ul>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.__init__", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.__init__", "kind": "function", "doc": "<p>Main class init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.gAPIGateway", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.gAPIGateway", "kind": "variable", "doc": "<p>API gateway of Gitee service. Default: <code>https://gitee.ru/api/v5</code></p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.timeout", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.timeout", "kind": "variable", "doc": "<p>Server operations timeout in seconds. Default: <code>15</code>.</p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.retry", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.retry", "kind": "variable", "doc": "<p>How many times retry after first request if a 5xx server errors occurred. If set to 0, then only first main\nrequest will be sent without retries. This allows you to reduce the number of calls to the server API for all methods.</p>\n\n<p>3 times of retries by default.</p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.pause", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.pause", "kind": "variable", "doc": "<p>Sleep time in seconds between retries, in all network requests 5 seconds by default.</p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.headers", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.headers", "kind": "variable", "doc": "<p>Headers which send in every request to broker server.</p>\n\n<p>Default: <code>{\"Content-Type\": \"application/json\", \"charset\": \"UTF-8\", \"accept\": \"application/json\", \"x-app-name\": \"3LogicGroup.GPReplicator\"}</code>.</p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.body", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.body", "kind": "variable", "doc": "<p>Request body which send to broker server. Default: <code>None</code>.</p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.gToken", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.gToken", "kind": "variable", "doc": "<p>Your API token at Gitee service.</p>\n\n<p>You can also use the environment variable <code>GITEE_TOKEN</code> or the key <code>--gitee-token</code> to define this parameter.</p>\n\n<p>Default: <code>None</code>.</p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.gOwner", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.gOwner", "kind": "variable", "doc": "<p>Project owner on Gitee service. This is the space name to which the repository belongs (name of enterprise, organization or individual.</p>\n\n<p>You can also use the environment variable <code>GITEE_OWNER</code> or the key <code>--gitee-owner</code> to define this parameter.</p>\n\n<p>Default: <code>None</code>.</p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.gProject", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.gProject", "kind": "variable", "doc": "<p>Project or repository name on Gitee service for mirroring.</p>\n\n<p>You can also use the environment variable <code>GITEE_PROJECT</code> or the key <code>--gitee-project</code> to define this parameter.</p>\n\n<p>Default: <code>None</code>.</p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.gSHA", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.gSHA", "kind": "variable", "doc": "<p>It can be the branch name (such as master), commit or the SHA value, which you are interested in. It used in some class methods. Default: <code>None</code></p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.gRecursive", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.gRecursive", "kind": "variable", "doc": "<p>You can set this variable to <code>True</code> if you want to receive data from Gitee service recursively. It used in some class methods. Default: <code>False</code></p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.moreDebug", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.moreDebug", "kind": "variable", "doc": "<p>Enables more debug information in this class, such as net request/response body and headers in all methods. <code>False</code> by default.</p>\n"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.SendAPIRequest", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.SendAPIRequest", "kind": "function", "doc": "<p>Send GET or POST request to API server and receive JSON object.</p>\n\n<p>self.header: dictionary of headers.\nself.body: request body. <code>None</code> by default.\nself.timeout: global request timeout, <code>15</code> seconds by default.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  url with REST request.</li>\n<li><strong>reqType</strong>:  send \"GET\" or \"POST\" request. <code>\"GET\"</code> by default.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>response JSON (dictionary).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">reqType</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GET&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.Files", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.Files", "kind": "function", "doc": "<p>Get all project files.</p>\n\n<p>All the variables: <code>gOwner</code>, <code>gProject</code> and <code>gSHA</code> must be defined for using this method!</p>\n\n<p><code>gSHA</code> can be the branch name (such as master), commit or the SHA value, which you are interested in.</p>\n\n<p>Also, you can set the <code>gRecursive</code> variable to <code>True</code> if you want to receive all tree files in all directories recursively.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with user's portfolio data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.Issues", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.Issues", "kind": "function", "doc": "<p>Get all project issues.</p>\n\n<p>All the variables: <code>gOwner</code> and <code>gProject</code> must be defined for using this method!</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dict with issues data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.Milestones", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.Milestones", "kind": "function", "doc": "<p>Get all project milestones.</p>\n\n<p>All the variables: <code>gOwner</code> and <code>gProject</code> must be defined for using this method!</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dict with milestones data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.GPReplicator.GiteeTransport.Releases", "modulename": "gpreplicator.GPReplicator", "qualname": "GiteeTransport.Releases", "kind": "function", "doc": "<p>Get all project published releases data.</p>\n\n<p>All the variables: <code>gOwner</code> and <code>gProject</code> must be defined for using this method!</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dict with releases.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.GPReplicator.GPReplicator", "modulename": "gpreplicator.GPReplicator", "qualname": "GPReplicator", "kind": "class", "doc": "<p>This class implements methods to work with Gitee HTTP API service.</p>\n\n<ul>\n<li>Russian Gitee service: <a href=\"https://gitee.ru\">https://gitee.ru</a>\n<ul>\n<li>Russian service API gateway: <a href=\"https://gitee.ru/api/v5\"><a href=\"https://gitee.ru/api/v5\">https://gitee.ru/api/v5</a></a></li>\n<li>Russian service swagger documentation: <a href=\"https://gitee.ru/api/v5/swagger\"><a href=\"https://gitee.ru/api/v5/swagger\">https://gitee.ru/api/v5/swagger</a></a></li>\n</ul></li>\n<li>Chinese Gitee service: <a href=\"https://gitee.com\">https://gitee.com</a>\n<ul>\n<li>Chinese service API gateway: <a href=\"https://gitee.com/api/v5\"><a href=\"https://gitee.com/api/v5\">https://gitee.com/api/v5</a></a></li>\n<li>Chinese service swagger documentation: <a href=\"https://gitee.com/api/v5/swagger\"><a href=\"https://gitee.com/api/v5/swagger\">https://gitee.com/api/v5/swagger</a></a></li>\n</ul></li>\n</ul>\n\n<p>Examples to work with API:</p>\n\n<ul>\n<li><a href=\"https://gitee.ru/api/v5/swagger\">https://gitee.ru/api/v5/swagger</a></li>\n<li><a href=\"https://gitee.com/api/v5/swagger\">https://gitee.com/api/v5/swagger</a></li>\n</ul>\n\n<p>About <code>gToken</code> for Gitee OAuth:</p>\n\n<ul>\n<li><a href=\"https://gitee.ru/api/v5/oauth_doc\">https://gitee.ru/api/v5/oauth_doc</a></li>\n<li><a href=\"https://gitee.com/api/v5/oauth_doc\">https://gitee.com/api/v5/oauth_doc</a></li>\n</ul>\n", "bases": "GiteeTransport"}, {"fullname": "gpreplicator.GPReplicator.GPReplicator.__init__", "modulename": "gpreplicator.GPReplicator", "qualname": "GPReplicator.__init__", "kind": "function", "doc": "<p>Main class init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "gpreplicator.GPReplicator.ParseArgs", "modulename": "gpreplicator.GPReplicator", "qualname": "ParseArgs", "kind": "function", "doc": "<p>This function get and parse command line keys.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.GPReplicator.Main", "modulename": "gpreplicator.GPReplicator", "qualname": "Main", "kind": "function", "doc": "<p>Main function for work with GPReplicator in the console.</p>\n\n<p>See examples:</p>\n\n<ul>\n<li>\ud83c\uddf7\ud83c\uddfa <a href=\"https://3logicgroup.github.io/GiteeProjectsReplicator/\">In Russian</a></li>\n<li>\ud83c\uddfa\ud83c\uddf8 <a href=\"https://github.com/3LogicGroup/GiteeProjectsReplicator/blob/master/README_EN.md\">In English</a></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.UniLogger", "modulename": "gpreplicator.UniLogger", "kind": "module", "doc": "<p>This module init standard python logging system with some of pre-defined parameters,\ne.g. debug level for log-file, info level for console, log-rotate and so on.</p>\n\n<p>Current internal logger name for GPMirroring module is <code>GPMirroring-UniLogger</code>.</p>\n"}, {"fullname": "gpreplicator.UniLogger.UniLogger", "modulename": "gpreplicator.UniLogger", "qualname": "UniLogger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger GPReplicator-UniLogger (DEBUG)&gt;"}, {"fullname": "gpreplicator.UniLogger.formatString", "modulename": "gpreplicator.UniLogger", "qualname": "formatString", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;%(filename)-20sL:%(lineno)-5d%(levelname)-8s[%(asctime)s] %(message)s&#x27;"}, {"fullname": "gpreplicator.UniLogger.formatter", "modulename": "gpreplicator.UniLogger", "qualname": "formatter", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;logging.Formatter object&gt;"}, {"fullname": "gpreplicator.UniLogger.SetLevel", "modulename": "gpreplicator.UniLogger", "qualname": "SetLevel", "kind": "function", "doc": "<p>This procedure setting up UniLogger verbosity level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vLevel</span><span class=\"o\">=</span><span class=\"s1\">&#39;ERROR&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.UniLogger.LevelFilter", "modulename": "gpreplicator.UniLogger", "qualname": "LevelFilter", "kind": "class", "doc": "<p>Class using to set up log level filtering.</p>\n", "bases": "logging.Filter"}, {"fullname": "gpreplicator.UniLogger.LevelFilter.__init__", "modulename": "gpreplicator.UniLogger", "qualname": "LevelFilter.__init__", "kind": "function", "doc": "<p>Initialize a filter.</p>\n\n<p>Initialize with the name of the logger which, together with its\nchildren, will have its events allowed through the filter. If no\nname is specified, allow every event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span></span>)</span>"}, {"fullname": "gpreplicator.UniLogger.LevelFilter.level", "modulename": "gpreplicator.UniLogger", "qualname": "LevelFilter.level", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gpreplicator.UniLogger.LevelFilter.filter", "modulename": "gpreplicator.UniLogger", "qualname": "LevelFilter.filter", "kind": "function", "doc": "<p>Determine if the specified record is to be logged.</p>\n\n<p>Returns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.UniLogger.EnableLogger", "modulename": "gpreplicator.UniLogger", "qualname": "EnableLogger", "kind": "function", "doc": "<p>Adding new file logger with rotation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">logFile</span>,</span><span class=\"param\">\t<span class=\"n\">parentHandler</span><span class=\"o\">=&lt;</span><span class=\"n\">Logger</span> <span class=\"n\">GPReplicator</span><span class=\"o\">-</span><span class=\"n\">UniLogger</span> <span class=\"p\">(</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">useFormat</span><span class=\"o\">=&lt;</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Formatter</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.UniLogger.DisableLogger", "modulename": "gpreplicator.UniLogger", "qualname": "DisableLogger", "kind": "function", "doc": "<p>Disable given file logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">handler</span>, </span><span class=\"param\"><span class=\"n\">parentHandler</span><span class=\"o\">=&lt;</span><span class=\"n\">Logger</span> <span class=\"n\">GPReplicator</span><span class=\"o\">-</span><span class=\"n\">UniLogger</span> <span class=\"p\">(</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gpreplicator.UniLogger.streamHandler", "modulename": "gpreplicator.UniLogger", "qualname": "streamHandler", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamHandler (DEBUG)&gt;"}, {"fullname": "gpreplicator.UniLogger.fileLogHandler", "modulename": "gpreplicator.UniLogger", "qualname": "fileLogHandler", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RotatingFileHandler D:\\work\\projects\\GiteeProjectsReplicator\\log.txt (DEBUG)&gt;"}, {"fullname": "gpreplicator.UniLogger.sepWide", "modulename": "gpreplicator.UniLogger", "qualname": "sepWide", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;------------------------------------------------------------------------------------------------------------------------&#x27;"}, {"fullname": "gpreplicator.UniLogger.sepLong", "modulename": "gpreplicator.UniLogger", "qualname": "sepLong", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;--------------------------------------------------------------------------------&#x27;"}, {"fullname": "gpreplicator.UniLogger.sepShort", "modulename": "gpreplicator.UniLogger", "qualname": "sepShort", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;----------------------------------------&#x27;"}, {"fullname": "gpreplicator.UniLogger.sepLine", "modulename": "gpreplicator.UniLogger", "qualname": "sepLine", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;=--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--=&#x27;"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();